services:
    database:
        image: postgres:14
        restart: always
        environment:
            POSTGRES_DB: mydatabase
            POSTGRES_USER: user
            POSTGRES_PASSWORD: password
        volumes:
            - db_data:/var/lib/postgresql/data
        healthcheck:
            test: [ "CMD-SHELL", "pg_isready -d mydatabase -U user" ]
            interval: 10s
            timeout: 5s
            retries: 5
            start_period: 30s

    part_2:
        image: meitarasaf/vacations_website:latest
        environment:
            DEBUG: 'False'
            POSTGRES_HOST: database
            POSTGRES_DB: mydatabase
            POSTGRES_USER: user
            POSTGRES_PASSWORD: password
            POSTGRES_PORT: 5432
        command: >
                sh -c "python manage.py migrate && python manage.py loaddata initial_data &&
                gunicorn vacations_project.wsgi:application --bind 0.0.0.0:8080 --workers 1"
        depends_on:
            database:
                condition: service_healthy

    statistics-backend:
        build:
            context: ./part_3/vacations_statistics_backend
            dockerfile: Dockerfile
        ports:
            - "8000:8000"
        environment:
            POSTGRES_HOST: database
            POSTGRES_DB: mydatabase
            POSTGRES_USER: user
            POSTGRES_PASSWORD: password
            POSTGRES_PORT: 5432
        depends_on:
            database:
                condition: service_healthy
        volumes:
            - ./part_3/vacations_statistics_backend:/app/backend
        command: >
            sh -c "
                python manage.py runserver 0.0.0.0:8000"

    statistics-frontend:
        build:
            context: ./part_3/vacations-statistics-frontend
            dockerfile: Dockerfile
        ports:
            - "3000:3000"
        environment:
            REACT_APP_API_URL: http://localhost:8000/

    nginx:
      build:
        context: ./jbprojectdjango
        dockerfile: Dockerfile.nginx
      ports:
        - "80:80"
      depends_on:
        - part_2

volumes:
    db_data:
